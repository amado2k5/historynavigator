

import React, { useState } from 'react';
import { Modal } from './Modal.tsx';
import { LoadingSpinner } from './LoadingSpinner.tsx';
// FIX: Added .tsx extension to the import path.
import { LightbulbIcon } from './Icons.tsx';

interface AIPromptModalProps {
    isOpen: boolean;
    onClose: () => void;
    // ... other props for context (event, civilization, etc.) might be needed
}

export const AIPromptModal: React.FC<AIPromptModalProps> = ({ isOpen, onClose }) => {
    const [prompt, setPrompt] = useState('');
    const [response, setResponse] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!prompt) return;

        setIsLoading(true);
        setError(null);
        setResponse('');
        try {
            // TODO: Implement Gemini API call
            // For now, we'll just simulate a response
            await new Promise(resolve => setTimeout(resolve, 1500));
            setResponse(`This is a simulated response to your question: "${prompt}". In a real application, this would be generated by a powerful AI model to provide deeper insights based on the current historical context.`);
        } catch (err) {
            setError('Failed to get a response from the AI.');
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} size="lg">
            <div className="flex items-start gap-4">
                <div className="flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-[var(--color-primary)]">
                    <LightbulbIcon className="h-6 w-6 text-[var(--color-accent)]" />
                </div>
                <div>
                    <h2 className="text-2xl font-bold font-heading mb-2" style={{color: 'var(--color-accent)'}}>Ask the Historian AI</h2>
                    <p className="text-[var(--color-secondary)] mb-4">Have a specific question about this period? Ask away!</p>
                </div>
            </div>

            <form onSubmit={handleSubmit}>
                <textarea
                    className="w-full h-24 p-2 bg-[var(--color-background-light)] border border-[var(--color-primary)] rounded-md focus:ring-2 focus:ring-[var(--color-accent)] focus:outline-none"
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="e.g., What was the daily life of a commoner like?"
                />
                <button
                    type="submit"
                    disabled={isLoading || !prompt}
                    className="mt-4 w-full bg-[var(--color-accent)] text-black font-bold py-2 px-4 rounded-md hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    {isLoading ? 'Thinking...' : 'Ask'}
                </button>
            </form>

            <div className="mt-6">
                {isLoading && (
                    <div className="flex justify-center items-center py-8">
                        <LoadingSpinner />
                    </div>
                )}
                {error && <p className="text-red-400">{error}</p>}
                {response && (
                    <div className="p-4 bg-[var(--color-background-light)] rounded-md">
                        <p className="whitespace-pre-wrap leading-relaxed">{response}</p>
                    </div>
                )}
            </div>
        </Modal>
    );
};
